
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 29 11:06:08 EST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 29 11:06:08 EST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\015\000\002\002" +
    "\014\000\002\002\013\000\002\002\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\004\000\002\036\004\000\002" +
    "\003\007\000\002\003\005\000\002\004\007\000\002\004" +
    "\005\000\002\005\007\000\002\005\005\000\002\006\007" +
    "\000\002\006\007\000\002\006\005\000\002\007\005\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\015\005\000\002\015\005\000\002\016" +
    "\005\000\002\016\005\000\002\017\005\000\002\017\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\005\000" +
    "\002\021\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\023\004\000\002\023" +
    "\004\000\002\024\005\000\002\024\005\000\002\025\004" +
    "\000\002\025\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\063\010" +
    "\000\002\063\004\000\002\027\005\000\002\030\005\000" +
    "\002\031\005\000\002\032\005\000\002\033\005\000\002" +
    "\034\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\010\000\002\035\010\000" +
    "\002\041\011\000\002\042\007\000\002\043\007\000\002" +
    "\043\010\000\002\044\010\000\002\044\007\000\002\045" +
    "\004\000\002\046\011\000\002\061\007\000\002\047\010" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\004\000\002\054\010\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\053\007\000" +
    "\002\055\010\000\002\056\010\000\002\057\007\000\002" +
    "\060\013\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\006\002\ufffd\061\004\001\002\000\004\030" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\031\015\032\012\001\002\000\004\031" +
    "\uffaf\001\002\000\004\031\uffb0\001\002\000\016\004\u012a" +
    "\005\u0128\006\u0125\007\u0129\010\u0126\013\u0127\001\002\000" +
    "\004\031\u011d\001\002\000\004\031\uffb2\001\002\000\004" +
    "\040\021\001\002\000\004\031\uffb1\001\002\000\004\031" +
    "\uffb4\001\002\000\004\031\uffb3\001\002\000\016\004\027" +
    "\005\034\006\025\007\030\041\023\067\031\001\002\000" +
    "\014\004\027\006\025\041\ufff9\067\ufff9\070\ufff9\001\002" +
    "\000\004\042\u0117\001\002\000\010\041\ufffb\067\ufffb\070" +
    "\ufffb\001\002\000\004\067\u0112\001\002\000\004\041\061" +
    "\001\002\000\004\067\054\001\002\000\004\067\045\001" +
    "\002\000\004\067\043\001\002\000\010\041\ufffa\067\ufffa" +
    "\070\ufffa\001\002\000\010\041\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\004\067\036\001\002\000\010\041\ufff8\067\ufff8" +
    "\070\ufff8\001\002\000\006\022\040\060\037\001\002\000" +
    "\010\041\ufff2\067\ufff2\070\ufff2\001\002\000\004\071\041" +
    "\001\002\000\004\060\042\001\002\000\010\041\ufff3\067" +
    "\ufff3\070\ufff3\001\002\000\004\060\044\001\002\000\010" +
    "\041\uffec\067\uffec\070\uffec\001\002\000\006\022\047\060" +
    "\046\001\002\000\010\041\uffed\067\uffed\070\uffed\001\002" +
    "\000\006\056\051\057\050\001\002\000\004\060\053\001" +
    "\002\000\004\060\052\001\002\000\010\041\uffef\067\uffef" +
    "\070\uffef\001\002\000\010\041\uffee\067\uffee\070\uffee\001" +
    "\002\000\006\022\056\060\055\001\002\000\014\004\ufff4" +
    "\006\ufff4\041\ufff4\067\ufff4\070\ufff4\001\002\000\004\070" +
    "\057\001\002\000\004\060\060\001\002\000\014\004\ufff5" +
    "\006\ufff5\041\ufff5\067\ufff5\070\ufff5\001\002\000\004\042" +
    "\062\001\002\000\024\012\115\015\111\020\121\021\066" +
    "\033\065\053\110\065\122\067\100\070\071\001\002\000" +
    "\012\031\uffce\043\uffce\064\uffce\066\uffce\001\002\000\014" +
    "\031\uffe7\043\uffe7\064\uffe7\065\uffe7\066\uffe7\001\002\000" +
    "\020\056\u0103\057\u0101\067\u0102\070\u0104\071\377\072\376" +
    "\073\375\001\002\000\004\065\360\001\002\000\014\031" +
    "\uffea\043\uffea\064\uffea\065\uffea\066\uffea\001\002\000\012" +
    "\031\uffd0\043\uffd0\064\uffd0\066\uffd0\001\002\000\030\023" +
    "\331\024\332\025\327\026\330\027\333\045\154\046\151" +
    "\047\150\050\147\051\153\052\152\001\002\000\010\031" +
    "\uff8a\043\uff8a\064\uff8a\001\002\000\004\043\325\001\002" +
    "\000\010\031\uff8b\043\uff8b\064\uff8b\001\002\000\010\031" +
    "\uff7b\043\uff7b\064\uff7b\001\002\000\010\031\uff8e\043\uff8e" +
    "\064\uff8e\001\002\000\014\031\uffeb\043\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\001\002\000\034\022\272\023\271\024\274" +
    "\025\267\026\270\027\275\045\171\046\165\047\166\050" +
    "\164\051\167\052\170\065\273\001\002\000\012\016\262" +
    "\031\uff7f\043\uff7f\064\uff7f\001\002\000\012\017\255\031" +
    "\uff7e\043\uff7e\064\uff7e\001\002\000\014\031\uffe9\043\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\001\002\000\010\031\uff91\043" +
    "\uff91\064\uff91\001\002\000\010\031\uff90\043\uff90\064\uff90" +
    "\001\002\000\010\031\uff92\043\uff92\064\uff92\001\002\000" +
    "\010\031\uff7d\043\uff7d\064\uff7d\001\002\000\006\067\254" +
    "\070\253\001\002\000\004\065\133\001\002\000\016\004" +
    "\216\005\223\006\215\007\217\013\222\067\220\001\002" +
    "\000\010\031\uff89\043\uff89\064\uff89\001\002\000\012\031" +
    "\uffcf\043\uffcf\064\uffcf\066\uffcf\001\002\000\004\065\207" +
    "\001\002\000\010\031\uff93\043\uff93\064\uff93\001\002\000" +
    "\010\031\uff8f\043\uff8f\064\uff8f\001\002\000\014\031\uffe8" +
    "\043\uffe8\064\uffe8\065\uffe8\066\uffe8\001\002\000\004\065" +
    "\133\001\002\000\004\014\126\001\002\000\010\031\uff7c" +
    "\043\uff7c\064\uff7c\001\002\000\012\031\uffd2\043\uffd2\064" +
    "\uffd2\066\uffd2\001\002\000\012\031\uffd1\043\uffd1\064\uffd1" +
    "\066\uffd1\001\002\000\004\067\127\001\002\000\004\014" +
    "\130\001\002\000\004\066\131\001\002\000\004\060\132" +
    "\001\002\000\010\031\uff9a\043\uff9a\064\uff9a\001\002\000" +
    "\010\053\110\067\143\070\144\001\002\000\004\063\135" +
    "\001\002\000\024\012\115\015\111\020\121\021\066\033" +
    "\065\053\110\065\122\067\100\070\071\001\002\000\004" +
    "\064\137\001\002\000\010\031\uff81\043\uff81\064\uff81\001" +
    "\002\000\004\066\206\001\002\000\004\066\205\001\002" +
    "\000\004\066\204\001\002\000\020\022\172\045\171\046" +
    "\165\047\166\050\164\051\167\052\170\001\002\000\016" +
    "\045\154\046\151\047\150\050\147\051\153\052\152\001" +
    "\002\000\004\066\146\001\002\000\004\063\uff87\001\002" +
    "\000\004\070\163\001\002\000\004\070\162\001\002\000" +
    "\004\070\161\001\002\000\006\067\160\070\157\001\002" +
    "\000\004\070\156\001\002\000\004\070\155\001\002\000" +
    "\012\031\uffcd\043\uffcd\064\uffcd\066\uffcd\001\002\000\012" +
    "\031\uffc5\043\uffc5\064\uffc5\066\uffc5\001\002\000\014\031" +
    "\uffc3\043\uffc3\060\uffc3\064\uffc3\066\uffc3\001\002\000\014" +
    "\031\uffc0\043\uffc0\060\uffc0\064\uffc0\066\uffc0\001\002\000" +
    "\012\031\uffcb\043\uffcb\064\uffcb\066\uffcb\001\002\000\012" +
    "\031\uffc9\043\uffc9\064\uffc9\066\uffc9\001\002\000\012\031" +
    "\uffc7\043\uffc7\064\uffc7\066\uffc7\001\002\000\004\067\203" +
    "\001\002\000\004\067\202\001\002\000\004\067\201\001" +
    "\002\000\004\067\200\001\002\000\006\067\177\070\176" +
    "\001\002\000\004\067\175\001\002\000\006\056\174\057" +
    "\173\001\002\000\012\031\uffbc\043\uffbc\064\uffbc\066\uffbc" +
    "\001\002\000\012\031\uffbd\043\uffbd\064\uffbd\066\uffbd\001" +
    "\002\000\012\031\uffcc\043\uffcc\064\uffcc\066\uffcc\001\002" +
    "\000\014\031\uffc1\043\uffc1\060\uffc1\064\uffc1\066\uffc1\001" +
    "\002\000\014\031\uffc2\043\uffc2\060\uffc2\064\uffc2\066\uffc2" +
    "\001\002\000\012\031\uffc4\043\uffc4\064\uffc4\066\uffc4\001" +
    "\002\000\012\031\uffc8\043\uffc8\064\uffc8\066\uffc8\001\002" +
    "\000\012\031\uffca\043\uffca\064\uffca\066\uffca\001\002\000" +
    "\012\031\uffc6\043\uffc6\064\uffc6\066\uffc6\001\002\000\004" +
    "\063\uff86\001\002\000\004\063\uff88\001\002\000\004\063" +
    "\uff85\001\002\000\004\067\210\001\002\000\004\066\211" +
    "\001\002\000\004\060\212\001\002\000\010\031\uff9b\043" +
    "\uff9b\064\uff9b\001\002\000\010\031\uff8d\043\uff8d\064\uff8d" +
    "\001\002\000\004\011\243\001\002\000\004\067\242\001" +
    "\002\000\004\067\241\001\002\000\004\067\240\001\002" +
    "\000\006\022\234\065\233\001\002\000\004\022\226\001" +
    "\002\000\004\067\225\001\002\000\004\067\224\001\002" +
    "\000\006\022\uffb8\066\uffb8\001\002\000\006\022\uffb6\066" +
    "\uffb6\001\002\000\004\011\227\001\002\000\004\065\230" +
    "\001\002\000\004\066\231\001\002\000\004\060\232\001" +
    "\002\000\010\031\uff99\043\uff99\064\uff99\001\002\000\004" +
    "\067\235\001\002\000\004\011\uff97\001\002\000\004\066" +
    "\236\001\002\000\004\060\237\001\002\000\010\031\uff8c" +
    "\043\uff8c\064\uff8c\001\002\000\006\022\uffb5\066\uffb5\001" +
    "\002\000\006\022\uffb9\066\uffb9\001\002\000\006\022\uffb7" +
    "\066\uffb7\001\002\000\004\065\244\001\002\000\004\066" +
    "\245\001\002\000\004\060\246\001\002\000\010\031\uff98" +
    "\043\uff98\064\uff98\001\002\000\004\063\250\001\002\000" +
    "\024\012\115\015\111\020\121\021\066\033\065\053\110" +
    "\065\122\067\100\070\071\001\002\000\004\064\252\001" +
    "\002\000\012\016\uff84\031\uff84\043\uff84\064\uff84\001\002" +
    "\000\012\031\uffbf\043\uffbf\064\uffbf\066\uffbf\001\002\000" +
    "\012\031\uffbe\043\uffbe\064\uffbe\066\uffbe\001\002\000\004" +
    "\065\133\001\002\000\004\063\257\001\002\000\024\012" +
    "\115\015\111\020\121\021\066\033\065\053\110\065\122" +
    "\067\100\070\071\001\002\000\004\064\261\001\002\000" +
    "\010\031\uff82\043\uff82\064\uff82\001\002\000\004\065\133" +
    "\001\002\000\004\063\264\001\002\000\024\012\115\015" +
    "\111\020\121\021\066\033\065\053\110\065\122\067\100" +
    "\070\071\001\002\000\004\064\266\001\002\000\012\017" +
    "\uff83\031\uff83\043\uff83\064\uff83\001\002\000\006\067\322" +
    "\070\321\001\002\000\006\067\316\070\315\001\002\000" +
    "\006\067\312\070\311\001\002\000\022\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\013\uff97\056\174\057\173\067\uff97\001" +
    "\002\000\004\070\306\001\002\000\006\067\303\070\302" +
    "\001\002\000\006\067\277\070\276\001\002\000\004\060" +
    "\301\001\002\000\004\060\300\001\002\000\014\031\uffd3" +
    "\043\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000\014\031" +
    "\uffd4\043\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002\000\004" +
    "\060\305\001\002\000\004\060\304\001\002\000\014\031" +
    "\uffdf\043\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000\014" +
    "\031\uffe0\043\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000" +
    "\004\066\307\001\002\000\004\060\310\001\002\000\010" +
    "\031\uff95\043\uff95\064\uff95\001\002\000\004\060\314\001" +
    "\002\000\004\060\313\001\002\000\014\031\uffe3\043\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\001\002\000\014\031\uffe4\043" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\001\002\000\004\060\320" +
    "\001\002\000\004\060\317\001\002\000\014\031\uffdb\043" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000\014\031\uffdc" +
    "\043\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002\000\004\060" +
    "\324\001\002\000\004\060\323\001\002\000\014\031\uffd7" +
    "\043\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002\000\014\031" +
    "\uffd8\043\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\004" +
    "\062\326\001\002\000\004\002\uffff\001\002\000\006\067" +
    "\355\070\354\001\002\000\006\067\351\070\350\001\002" +
    "\000\006\067\345\070\344\001\002\000\006\067\341\070" +
    "\340\001\002\000\006\067\335\070\334\001\002\000\004" +
    "\060\337\001\002\000\004\060\336\001\002\000\014\031" +
    "\uffd5\043\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002\000\014" +
    "\031\uffd6\043\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\004\060\343\001\002\000\004\060\342\001\002\000\014" +
    "\031\uffe1\043\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000" +
    "\014\031\uffe2\043\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002" +
    "\000\004\060\347\001\002\000\004\060\346\001\002\000" +
    "\014\031\uffe5\043\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\014\031\uffe6\043\uffe6\064\uffe6\065\uffe6\066\uffe6\001" +
    "\002\000\004\060\353\001\002\000\004\060\352\001\002" +
    "\000\014\031\uffdd\043\uffdd\064\uffdd\065\uffdd\066\uffdd\001" +
    "\002\000\014\031\uffde\043\uffde\064\uffde\065\uffde\066\uffde" +
    "\001\002\000\004\060\357\001\002\000\004\060\356\001" +
    "\002\000\014\031\uffd9\043\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\001\002\000\014\031\uffda\043\uffda\064\uffda\065\uffda\066" +
    "\uffda\001\002\000\014\004\027\005\034\006\025\007\030" +
    "\067\031\001\002\000\006\067\363\070\362\001\002\000" +
    "\004\052\152\001\002\000\004\052\170\001\002\000\004" +
    "\060\365\001\002\000\004\067\366\001\002\000\006\054" +
    "\373\055\374\001\002\000\004\063\370\001\002\000\024" +
    "\012\115\015\111\020\121\021\066\033\065\053\110\065" +
    "\122\067\100\070\071\001\002\000\004\064\372\001\002" +
    "\000\010\031\uff80\043\uff80\064\uff80\001\002\000\004\063" +
    "\uffbb\001\002\000\004\063\uffba\001\002\000\004\060\u0111" +
    "\001\002\000\004\060\u0110\001\002\000\004\060\u010f\001" +
    "\002\000\004\065\u0109\001\002\000\004\060\u0108\001\002" +
    "\000\016\023\271\024\274\025\267\026\270\027\275\060" +
    "\u0107\001\002\000\004\060\u0106\001\002\000\016\023\331" +
    "\024\332\025\327\026\330\027\333\060\u0105\001\002\000" +
    "\010\031\uffa3\043\uffa3\064\uffa3\001\002\000\010\031\uffa5" +
    "\043\uffa5\064\uffa5\001\002\000\010\031\uffa6\043\uffa6\064" +
    "\uffa6\001\002\000\010\031\uffa4\043\uffa4\064\uffa4\001\002" +
    "\000\006\067\u010c\070\u010a\001\002\000\014\023\331\024" +
    "\332\025\327\026\330\027\333\001\002\000\004\066\u010d" +
    "\001\002\000\014\023\271\024\274\025\267\026\270\027" +
    "\275\001\002\000\004\060\u010e\001\002\000\010\031\uff9f" +
    "\043\uff9f\064\uff9f\001\002\000\010\031\uffa2\043\uffa2\064" +
    "\uffa2\001\002\000\010\031\uffa1\043\uffa1\064\uffa1\001\002" +
    "\000\010\031\uffa0\043\uffa0\064\uffa0\001\002\000\006\022" +
    "\u0114\060\u0113\001\002\000\010\041\ufff0\067\ufff0\070\ufff0" +
    "\001\002\000\004\067\u0115\001\002\000\004\060\u0116\001" +
    "\002\000\010\041\ufff1\067\ufff1\070\ufff1\001\002\000\024" +
    "\012\115\015\111\020\121\021\066\033\065\053\110\065" +
    "\122\067\100\070\071\001\002\000\004\043\u0119\001\002" +
    "\000\004\062\u011a\001\002\000\004\002\ufffe\001\002\000" +
    "\010\041\ufff7\067\ufff7\070\ufff7\001\002\000\010\041\ufff6" +
    "\067\ufff6\070\ufff6\001\002\000\004\040\u011e\001\002\000" +
    "\014\004\027\005\034\006\025\007\030\067\031\001\002" +
    "\000\004\041\u0120\001\002\000\004\042\u0121\001\002\000" +
    "\024\012\115\015\111\020\121\021\066\033\065\053\110" +
    "\065\122\067\100\070\071\001\002\000\004\043\u0123\001" +
    "\002\000\004\062\u0124\001\002\000\004\002\000\001\002" +
    "\000\010\012\115\065\122\067\u012d\001\002\000\010\012" +
    "\115\065\122\067\u012d\001\002\000\010\012\115\065\122" +
    "\067\u012d\001\002\000\010\012\115\065\122\067\u012d\001" +
    "\002\000\010\012\115\065\122\067\u012d\001\002\000\010" +
    "\012\115\065\122\067\u012d\001\002\000\004\064\u0133\001" +
    "\002\000\004\031\uffac\001\002\000\004\065\u012e\001\002" +
    "\000\014\004\216\005\223\006\215\007\217\013\222\001" +
    "\002\000\004\066\u0130\001\002\000\004\063\u0131\001\002" +
    "\000\024\012\115\015\111\020\121\021\066\033\065\053" +
    "\110\065\122\067\100\070\071\001\002\000\004\031\uffae" +
    "\001\002\000\004\031\uffad\001\002\000\004\031\uffa8\001" +
    "\002\000\004\031\uffab\001\002\000\004\031\uffa9\001\002" +
    "\000\004\031\uffa7\001\002\000\004\031\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\027\010\030\015" +
    "\031\013\032\017\033\016\034\007\037\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\021" +
    "\004\031\005\023\006\032\007\034\036\025\001\001\000" +
    "\006\003\u011a\005\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\010\076\011\066\012\102\013\117\014\063" +
    "\015\124\016\123\017\067\020\113\021\062\022\103\023" +
    "\116\024\104\040\075\043\073\045\111\051\115\052\105" +
    "\053\100\054\072\055\101\056\106\057\122\060\074\061" +
    "\071\062\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\076\011\066\012\102\013\117\014\063\051" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\246\001\001\000\010\026\220\044\212" +
    "\045\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\124\016\123\017\067" +
    "\020\113\021\062\022\140\023\144\024\137\052\141\001" +
    "\001\000\002\001\001\000\066\010\076\011\066\012\102" +
    "\013\117\014\063\015\124\016\123\017\067\020\113\021" +
    "\062\022\103\023\116\024\104\040\075\043\073\045\111" +
    "\051\115\052\105\053\100\054\135\055\101\056\106\057" +
    "\122\060\074\061\071\062\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\010\076\011\066\012" +
    "\102\013\117\014\063\015\124\016\123\017\067\020\113" +
    "\021\062\022\103\023\116\024\104\040\075\043\073\045" +
    "\111\051\115\052\105\053\100\054\250\055\101\056\106" +
    "\057\122\060\074\061\071\062\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\255\001\001\000\002\001\001\000\066\010" +
    "\076\011\066\012\102\013\117\014\063\015\124\016\123" +
    "\017\067\020\113\021\062\022\103\023\116\024\104\040" +
    "\075\043\073\045\111\051\115\052\105\053\100\054\257" +
    "\055\101\056\106\057\122\060\074\061\071\062\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\262" +
    "\001\001\000\002\001\001\000\066\010\076\011\066\012" +
    "\102\013\117\014\063\015\124\016\123\017\067\020\113" +
    "\021\062\022\103\023\116\024\104\040\075\043\073\045" +
    "\111\051\115\052\105\053\100\054\264\055\101\056\106" +
    "\057\122\060\074\061\071\062\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\021\004\031\005\023\006\032\007\034\036\360" +
    "\001\001\000\004\022\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\010\076\011" +
    "\066\012\102\013\117\014\063\015\124\016\123\017\067" +
    "\020\113\021\062\022\103\023\116\024\104\040\075\043" +
    "\073\045\111\051\115\052\105\053\100\054\370\055\101" +
    "\056\106\057\122\060\074\061\071\062\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\076\011\066\012\102\013\117\014\063\051\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\010\076\011\066\012\102\013\117\014\063" +
    "\015\124\016\123\017\067\020\113\021\062\022\103\023" +
    "\116\024\104\040\075\043\073\045\111\051\115\052\105" +
    "\053\100\054\u0117\055\101\056\106\057\122\060\074\061" +
    "\071\062\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\021\004\031\005\023\006\032" +
    "\007\034\036\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\010\076\011\066\012\102\013\117\014\063" +
    "\015\124\016\123\017\067\020\113\021\062\022\103\023" +
    "\116\024\104\040\075\043\073\045\111\051\115\052\105" +
    "\053\100\054\u0121\055\101\056\106\057\122\060\074\061" +
    "\071\062\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\u012a\063\u0137\001\001\000" +
    "\006\043\u012a\063\u0136\001\001\000\006\043\u012a\063\u0135" +
    "\001\001\000\006\043\u012a\063\u0134\001\001\000\006\043" +
    "\u012a\063\u0133\001\001\000\006\043\u012a\063\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u012e\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\010\076\011\066\012\102\013\117\014\063\015" +
    "\124\016\123\017\067\020\113\021\062\022\103\023\116" +
    "\024\104\040\075\043\073\045\111\051\115\052\105\053" +
    "\100\054\u0131\055\101\056\106\057\122\060\074\061\071" +
    "\062\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CICLOS ::= HASTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CICLOS ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CICLOS ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CICLOS ::= OSI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CICLOS ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // HASTA ::= For Inicio_de_delimitador_de_argumentos VARIABLES OPERACION_RELACIONAL Fin_de_linea OPERACION_DECREMENTO_INCREMENTO Inicio_de_delimitador_de_bloque CUERPO Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HASTA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MIENTRAS ::= While SENTECIA Inicio_de_delimitador_de_bloque CUERPO Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SINO ::= OSI Else SENTECIA Inicio_de_delimitador_de_bloque CUERPO Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OSI ::= IF Elseif SENTECIA Inicio_de_delimitador_de_bloque CUERPO Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OSI",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF ::= If SENTECIA Inicio_de_delimitador_de_bloque CUERPO Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTECIA ::= Inicio_de_delimitador_de_argumentos OPERACION_BOOLEANA Fin_de_delimitador_de_argumentos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTECIA ::= Inicio_de_delimitador_de_argumentos OPE_LOGICAS Fin_de_delimitador_de_argumentos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTECIA ::= Inicio_de_delimitador_de_argumentos OPERACION_DE_ATRIBUCION Fin_de_delimitador_de_argumentos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTECIA ::= Inicio_de_delimitador_de_argumentos OPERACION_RELACIONAL Fin_de_delimitador_de_argumentos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPO ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPO ::= DEF_LLAMADO_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPO ::= DEF_CONESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPO ::= DEF_IGUALDAD Identificador Inicio_de_delimitador_de_argumentos Identificador Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPO ::= DEF_IGUALDAD DEF_CONLEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPO ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPO ::= OPERACION_DE_ATRIBUCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO ::= OPERACION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO ::= OPERACION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CUERPO ::= OPE_LOGICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPO ::= OPE_ARITMETICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEF_ACCEDER ::= Identificador Accerder Identificador Inicio_de_delimitador_de_argumentos Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_ACCEDER",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DEF_LLAMADO_FUNC ::= Identificador Inicio_de_delimitador_de_argumentos Numero Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_LLAMADO_FUNC",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DEF_INI_OBJ ::= DEF_IGUALDAD NVO Identificador Inicio_de_delimitador_de_argumentos Identificador Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_INI_OBJ",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DEF_IGUALDAD ::= Identificador Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_IGUALDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DEF_CONLEER ::= DEF_IGUALDAD Lectura Inicio_de_delimitador_de_argumentos Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_CONLEER",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DEF_CONLEER ::= DECLARACION_FUNC Igual Lectura Inicio_de_delimitador_de_argumentos Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_CONLEER",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEF_CONESC ::= Inicio_de_delimitador_de_argumentos Comillas Identificador Comillas Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_CONESC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DEF_CONESC ::= Escritura Inicio_de_delimitador_de_argumentos Identificador Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_CONESC",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DEF_MISM ::= MISM Accerder DEF_IGUALDAD Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_MISM",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DEF_INIOBJ ::= INIOBJ Inicio_de_delimitador_de_argumentos DECLARACION_FUNC Fin_de_delimitador_de_argumentos Inicio_de_delimitador_de_bloque DEF_MISM Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_INIOBJ",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEF_CLASS ::= CLASE Identificador Inicio_de_delimitador_de_bloque VARIABLES FUNCIONES Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEF_CLASS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RETURN ::= RET OPE_ARITMETICAS Inicio_de_delimitador_de_argumentos OPE_ARITMETICAS Fin_de_delimitador_de_argumentos Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RETURN ::= RET Caracteres Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RETURN ::= RET Caracter Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RETURN ::= RET NumeroDecimal Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RETURN ::= RET Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RETURN ::= RET False Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETURN ::= RET True Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETURN ::= RET Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNC_VAC ::= FUNC Void RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_VAC",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNC_BOOL ::= FUNC Booleano RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_BOOL",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNC_CAD ::= FUNC String RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_CAD",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNC_CAR ::= FUNC Char RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_CAR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNC_DEC ::= FUNC Double RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_DEC",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNC_ENT ::= FUNC Int RED_FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_ENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RED_FUNC ::= DEF_CONESC Fin_de_delimitador_de_bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RED_FUNC",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RED_FUNC ::= Identificador Inicio_de_delimitador_de_argumentos DECLARACION_FUNC Fin_de_delimitador_de_argumentos Inicio_de_delimitador_de_bloque CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RED_FUNC",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONES ::= FUNC_VAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONES ::= FUNC_ENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONES ::= FUNC_DEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONES ::= FUNC_CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCIONES ::= FUNC_CAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCIONES ::= FUNC_BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FUNC ::= Booleano Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FUNC ::= String Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_FUNC ::= Char Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_FUNC ::= Double Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_FUNC ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNC",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_DECREMENTO_INCREMENTO ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DECREMENTO_INCREMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_DECREMENTO_INCREMENTO ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DECREMENTO_INCREMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_BOOLEANA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_BOOLEANA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_DE_ATRIBUCION ::= Op_atribucion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DE_ATRIBUCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_DE_ATRIBUCION ::= Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DE_ATRIBUCION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_RELACIONAL ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_RELACIONAL ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_RELACIONAL ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION_RELACIONAL ::= Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_IGUALDAD_LOGICA ::= Identificador Igualdad_logica Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_IGUALDAD_LOGICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_IGUALDAD_LOGICA ::= Numero Igualdad_logica Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_IGUALDAD_LOGICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_DIFERENCIA_LOGICA ::= Identificador Diferencia_logica Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIFERENCIA_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION_DIFERENCIA_LOGICA ::= Numero Diferencia_logica Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIFERENCIA_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION_NOT ::= Identificador Not Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_NOT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION_NOT ::= Numero Not Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_NOT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION_AND ::= Identificador And Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION_AND ::= Numero And Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_AND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION_OR ::= Identificador Or Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_OR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION_OR ::= Numero Or Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_OR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPE_LOGICAS ::= OPERACION_IGUALDAD_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_LOGICAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPE_LOGICAS ::= OPERACION_DIFERENCIA_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_LOGICAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPE_LOGICAS ::= OPERACION_NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_LOGICAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPE_LOGICAS ::= OPERACION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_LOGICAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPE_LOGICAS ::= OPERACION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_LOGICAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_MODULO ::= Identificador Modulo Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MODULO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MODULO ::= Identificador Modulo Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MODULO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_MODULO ::= Numero Modulo Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MODULO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_MODULO ::= Numero Modulo Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MODULO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_MULTIPLICACION ::= Identificador Multiplicacion Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULTIPLICACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_MULTIPLICACION ::= Identificador Multiplicacion Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULTIPLICACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION_MULTIPLICACION ::= Numero Multiplicacion Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULTIPLICACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION_MULTIPLICACION ::= Numero Multiplicacion Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MULTIPLICACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_DIVISION ::= Identificador Division Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIVISION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_DIVISION ::= Identificador Division Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIVISION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION_DIVISION ::= Numero Division Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIVISION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION_DIVISION ::= Numero Division Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_DIVISION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION_RESTA ::= Identificador Resta Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RESTA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION_RESTA ::= Identificador Resta Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RESTA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION_RESTA ::= Numero Resta Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RESTA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION_RESTA ::= Numero Resta Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RESTA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION_SUMA ::= Identificador Suma Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SUMA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION_SUMA ::= Identificador Suma Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SUMA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION_SUMA ::= Numero Suma Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SUMA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION_SUMA ::= Numero Suma Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_SUMA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPE_ARITMETICAS ::= OPERACION_MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_ARITMETICAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPE_ARITMETICAS ::= OPERACION_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_ARITMETICAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPE_ARITMETICAS ::= OPERACION_DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_ARITMETICAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPE_ARITMETICAS ::= OPERACION_RESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_ARITMETICAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPE_ARITMETICAS ::= OPERACION_SUMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE_ARITMETICAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLE_OBJ ::= Identificador Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_OBJ",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE_BOOL ::= Booleano Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE_BOOL ::= Booleano Identificador Igual False Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE_BOOL ::= Booleano Identificador Igual True Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLE_CAR ::= Char Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_CAR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLE_CAR ::= Char Identificador Igual Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_CAR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE_DEC ::= Double Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE_DEC ::= Double Identificador Igual NumeroDecimal Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_DEC",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE_ENT ::= Int Identificador Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_ENT",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE_ENT ::= Int Identificador Igual Numero Fin_de_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE_ENT",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= VARIABLE_ENT VARIABLE_CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES ::= VARIABLE_ENT VARIABLE_ENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLES ::= VARIABLE_OBJ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= VARIABLE_ENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLES ::= VARIABLE_DEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLES ::= VARIABLE_CAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VARIABLES ::= VARIABLE_BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inicio_de_programa INIFUNC FINFUNC INIVAR FINVAR INIEJEC CUERPO FINEJEC Fin_de_programa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inicio_de_programa INIFUNC FINFUNC INIVAR VARIABLES FINVAR INIEJEC CUERPO FINEJEC Fin_de_programa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_de_programa INIFUNC FUNCIONES FINFUNC INIVAR VARIABLES FINVAR INIEJEC CUERPO FINEJEC Fin_de_programa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

